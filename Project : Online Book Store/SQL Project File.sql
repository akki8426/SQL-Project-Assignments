
CREATE DATABASE ONLINE_BOOKSTORE_PROJECT;

# STEP 1. CREATE FIRST TABLE "BOOKS" :-

CREATE TABLE BOOKS(
Book_ID	int	Primary key,
Title   varchar(100),	
Author  varchar(100),	
Genre	varchar(100),	
Published_Year	int,
Price	float,	
Stock	int);


# STEP 2. CHECK THE CREATED TABLE BOOKS:-

SELECT * FROM BOOKS;


# STEP 3. CREATE SECOND TABLE "CUSTOMERS" :-

CREATE TABLE CUSTOMERS(
Customer_ID	INT	PRIMARY KEY,
Name	VARCHAR(100),	
Email	VARCHAR(100),	
Phone	INT,
City	VARCHAR(100),	
Country	VARCHAR(100)
);	


# STEP 4. CHECK THE CREATED TABLE CUSTOMERS:-

SELECT * FROM CUSTOMERS;
DESC CUSTOMERS;


# STEP 5. CREATE THE THIRD TABLE "ORDERS" :-

CREATE TABLE ORDERS(
Order_ID	INT PRIMARY KEY,
Customer_ID	INT references customers(customer_id),
Book_ID	INT references books(Book_ID),
Order_Date	DATE,
Quantity	INT,
Total_Amount FLOAT );

# STEP 6. IMPORT DATA DIRECTLY FROM THE CSV FILE INTO SQL TABLE:-
1. GO TO DATABASE
2. OPEN THE TABLES CREATED
3. RIGHT CLICK ON THE REQUIRED TABLE
4. SELECT OPTION TABLE DATA IMPORT WIZARD
5. CLICK ON NEXT OPTIONS
6. FINISH THE IMPORT PROCESS


# STEP 7. CHECK ALL THE TABLES AFTER DATA IMPORT:-

SELECT * FROM ORDERS;
SELECT * FROM BOOKS;
SELECT * FROM CUSTOMERS;


# BASIC QUERIES QUESTIONS : 


# 1. RETRIVE ALL BOOKS IN THE "FICTION" GENRE :-

SELECT BOOK_ID,TITLE FROM BOOKS WHERE GENRE = "FICTION"; 


# 2. FIND BOOKS PUBLISHED AFTER THE YEAR 1950 :-

SELECT BOOK_ID,TITLE FROM BOOKS WHERE PUBLISHED_YEAR>1950;


# 3. LIST ALL THE CUSTOMERS FROM CANADA :

SELECT * FROM customers WHERE COUNTRY = "CANADA";


# 4. SHOW ALL ORDERS PLACED IN NOVEMBER 2023 :-

SELECT ORDER_ID,CUSTOMER_ID,BOOK_ID FROM orders WHERE Order_Date BETWEEN "2023-11-01" AND "2023-11-30";


# 5. RETRIVE THE TOTAL STOCKS OF BOOKS AVAILABLE:-

SELECT SUM(STOCK) AS TOTAL_BOOKS_AVAILABLE_IN_STOCKS FROM books;


#6. FIND THE DETAILS OF MOST EXPENSIVE BOOKS:-

SELECT * FROM BOOKS ORDER BY PRICE DESC LIMIT 1;


# 7. SHOW ALL CUSTOMERS WHO ORDER MORE THAN 5 QUANTITY OF BOOKS:-

SELECT C.Customer_ID, C.NAME, O.Quantity
from orders O 
JOIN customers C 
ON C.customer_ID = O.Customer_ID
WHERE O.Quantity > 5 
order by O.Quantity DESC ;

# 8. RETRIVE ALL ORDERS WHERE THE AMOUNT EXCEED $20:-

SELECT * FROM orders WHERE Total_Amount > 50.0;


# 9. LIST ALL THE GENRES AVAILABLE IN BOOKS TABLE:-

SELECT distinct GENRE FROM BOOKS;


# 10. FIND THE BOOK WITH THE LOWEST STOCK:-

SELECT * FROM BOOKS ORDER BY STOCK LIMIT 5;


# 11. CALCULATE THE TOTAL REVENUE GENERATED FROM ROMANCE GENRE:-

SELECT SUM(PRICE) AS TOTAL_REVENUE_BY_GENRE_ROMANCE FROM books WHERE GENRE = "ROMANCE";



# ADVANCED QUERIES QUESTIONS: 


# 12. RETRIVE THE TOTAL NUMBER OF BOOKS SOLD FOR EACH GENURE:-

SELECT B.GENRE, SUM(O.QUANTITY) AS TOTAL_BOOKS_SOLD 
FROM orders O 
JOIN books B 
ON O.Book_ID = B.Book_ID
GROUP BY B.Genre;


# 13. FIND THE AVERAGE PRICE OF BOOKS IN THE FANTASY GENRE:-

SELECT AVG(PRICE) AS AVERAGE_PRICE FROM books WHERE Genre = "fANTASY";


# 14. LIST THE CUSTOMERS WHO HAVE PLACED ATLEAST 2 ORDERS:-

SELECT C.CUSTOMER_ID,C.NAME, 
COUNT(O.Order_ID) AS ORDER_COUNT FROM orders O 
JOIN customers C 
ON O.Customer_ID = C.Customer_ID
group by C.Customer_ID,C.NAME 
HAVING COUNT(O.Order_ID)>=2;


# 15. FIND THE MOST FREQUENT BOOK ORDER:-

SELECT B.BOOK_ID, B.TITLE, COUNT(O.ORDER_ID) AS MOST_FREQUENTLY_BOOK_ORDER 
FROM orders O 
JOIN books B 
ON o.Book_ID = b.Book_ID 
GROUP BY B.Book_ID,B.Title
ORDER BY COUNT(O.Order_ID) DESC limit 7; 


# 16. SHOW THE TOP 3 MOST EXPENSIVE BOOKS OF FANTASY GENRE:-

SELECT * FROM books WHERE Genre = "FANTASY" order by Price DESC LIMIT 3;


# 17. RETRIVE THE TOTAL QUANTITY OF BOOKS SOLD BY EACH AUTHOR:-

SELECT B.AUTHOR, SUM(O.QUANTITY) AS TOTAL_QUANTITY_OF_BOOKS_SOLD 
FROM orders O 
JOIN books B 
ON O.Book_ID = B.Book_ID
group by B.Author;


# 18. list the cities where customers who spend over $30 are located:-

SELECT DISTINCT C.CITY, O.TOTAL_AMOUNT AS TOTAL_AMOUNT_SPEND 
FROM ORDERS O 
JOIN CUSTOMERS C 
ON O.CUSTOMER_ID = C.CUSTOMER_ID 
WHERE O.TOTAL_AMOUNT > 30;


# 19. FIND THE CUSTOMER WHO SPEND THE MOST ON ORDERS:-

SELECT C.CUSTOMER_ID,C.NAME, SUM(O.TOTAL_AMOUNT) AS TOTAL_SPEND 
FROM ORDERS O 
JOIN CUSTOMERS C 
ON O.CUSTOMER_ID = O.CUSTOMER_ID
GROUP BY C.CUSTOMER_ID,C.NAME
ORDER BY TOTAL_SPEND DESC LIMIT 1;


# 20. CALCULATE THE STOCK REMAINING AFTER FULLFILLING ALL ORDERS:-

SELECT b.Book_ID, b.Title,
b.Stock - COALESCE(SUM(o.Quantity), 0) AS Remaining_Stock
FROM Books b
LEFT JOIN orders o 
ON b.Book_ID = o.Book_ID
GROUP BY b.Book_ID, b.Title, b.Stock;
